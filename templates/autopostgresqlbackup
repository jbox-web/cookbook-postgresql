# *** DO NOT EDIT THIS FILE ***
#
# This file is managed by Chef.

# ===============================
# === Debian specific options ===
#================================

# By default, on Debian systems, only 'postgres' user
# is allowed to access PostgreSQL databases without password.
# In order to dump databases we need to run pg_dump/psql
# commands as 'postgres' with su.
#
# The following setting has been added to workraound this issue.
# (if it is set to empty, 'su' usage will be disabled)
SU_USERNAME=<%= @config[:su_username] %>

#=====================================================================
# Set the following variables to your system needs
# (Detailed instructions below variables)
#=====================================================================

# Username to access the PostgreSQL server e.g. dbuser
USERNAME=<%= @config[:username] %>

# Password
# create a file $HOME/.pgpass containing a line like this
#   hostname:*:*:dbuser:dbpass
# replace hostname with the value of DBHOST and postgres with
# the value of USERNAME

# Host name (or IP address) of PostgreSQL server e.g localhost
DBHOST=<%= @config[:dbhost] %>

# List of DBNAMES for Daily/Weekly Backup e.g. "DB1 DB2 DB3"
DBNAMES="<%= @config[:dbnames] %>"

# pseudo database name used to dump global objects (users, roles, tablespaces)
GLOBALS_OBJECTS="<%= @config[:globals_objects] %>"

# Backup directory location e.g /backups
BACKUPDIR="<%= @config[:backupdir] %>"

# Mail setup
# What would you like to be mailed to you?
# - log   : send only log file
# - files : send log file and sql files as attachments (see docs)
# - stdout : will simply output the log to the screen if run manually.
# - quiet : Only send logs if an error occurs to the MAILADDR.
MAILCONTENT="<%= @config[:mailcontent] %>"

# Set the maximum allowed email size in k. (4000 = approx 5MB email [see docs])
MAXATTSIZE="<%= @config[:maxattsize] %>"

# Email Address to send mail to? (user@domain.com)
MAILADDR="<%= @config[:mailaddr] %>"

# ============================================================
# === ADVANCED OPTIONS ( Read the doc's below for details )===
#=============================================================

# List of DBBNAMES for Monthly Backups.
MDBNAMES="<%= @config[:mdbnames] %>"

# List of DBNAMES to EXLUCDE if DBNAMES are set to all (must be in " quotes)
DBEXCLUDE="<%= @config[:dbexclude] %>"

# Include CREATE DATABASE in backup?
CREATE_DATABASE=<%= @config[:create_database] %>

# Separate backup directory and file for each DB? (yes or no)
SEPDIR=<%= @config[:sepdir] %>

# Which day do you want weekly backups? (1 to 7 where 1 is Monday)
DOWEEKLY=<%= @config[:doweekly] %>

# Choose Compression type. (gzip or bzip2)
COMP=<%= @config[:comp] %>

# Compress communications between backup server and PostgreSQL server?
# set compression level from 0 to 9 (0 means no compression)
COMMCOMP=<%= @config[:commcomp] %>

# Additionally keep a copy of the most recent backup in a seperate directory.
LATEST=<%= @config[:latest] %>

# OPT string for use with pg_dump ( see man pg_dump )
OPT="<%= @config[:opt] %>"

# Backup files extension
EXT="<%= @config[:ext] %>"

# Backup files permissions                                    <
PERM=<%= @config[:perm] %>

# Encyrption settings
# (inspired by http://blog.altudov.com/2010/09/27/using-openssl-for-asymmetric-encryption-of-backups/)
#
# Once the backup done, each SQL dump will be encrypted and the original file
# will be deleted (if encryption was successful).
# It is recommended to backup into a staging directory, and then use the
# POSTBACKUP script to sync the encrypted files to the desired location.
#
# Encryption uses private/public keys. You can generate the key pairs like the following:
# openssl req -x509 -nodes -days 100000 -newkey rsa:2048 -keyout backup.key -out backup.crt -subj '/'
#
# Decryption:
# openssl smime -decrypt -in backup.sql.gz.enc -binary -inform DEM -inkey backup.key -out backup.sql.gz

# Enable encryption
ENCRYPTION=<%= @config[:encryption] %>

# Encryption public key
ENCRYPTION_PUBLIC_KEY="<%= @config[:encryption_public_key] %>"

# Encryption Cipher (see enc manpage)
ENCRYPTION_CIPHER="<%= @config[:encryption_cipher] %>"

# Suffix for encyrpted files
ENCRYPTION_SUFFIX="<%= @config[:encryption_suffix] %>"

# Command to run before backups (uncomment to use)
#PREBACKUP="/etc/postgresql-backup-pre"

# Command run after backups (uncomment to use)
#POSTBACKUP="/etc/postgresql-backup-post"
